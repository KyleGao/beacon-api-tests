---
$schema: http://json-schema.org/draft-07/schema#
type: array
title: "A test file, giving a list of tests"
items:
  type: object
  title: "A test object"
  required:
    - name
    - descr
  oneOf:
    - required:
        - skip
    - required:
        - results
  properties:
    name:
      type: string
      title: "The name of the test"
    descr:
      type: string
      title: "A short description of the test"
    skip:
      type: boolean
      title: "Signals that a test should not be run"
      default: false
    query:
      $ref: "#/definitions/query"
    results:
      $ref: '#/definitions/results'
    beacondata:
      $ref: '#/definitions/beacondata'
    vcf:
      title: A reference to (a variant in) a vcf file
      type: string
  additionalProperties: false

definitions:
  datafields: &datafields
    # This describes the fields of beacon data, query or a response.
    # Note that this is not an attempt to reformulate the official spec,
    # but a shorter overview allowing all fields to be null.
    referenceName:
      type:
        - string
        - "null"
    referenceBases:
      type:
        - string
        - "null"
    alternateBases:
      type:
        - string
        - "null"
    variantType:
      type:
        - string
        - "null"
    assemblyId:
      type:
        - string
        - "null"
    id:  # datasetId in response to info call
      type:
        - string
        - "null"
    start:
      type:
        - integer
        - "null"
    end:
      type:
        - integer
        - "null"
    datasetIds:
      type: array
      items:
        type: string

    mateName:
      type:
        - string
        - "null"
    sampleCount:
      type:
        - integer
        - "null"
    variantCount:
      type:
        - integer
        - "null"
    callCount:
      type:
        - integer
        - "null"
    frequency:
      type:
        - number
        - "null"

  query:
    title: "Models a query to a Beacon"
    properties:
      <<: *datafields
      includeDatasetResponses:
        type: string
      datasetIds:
        type: array
        items:
          type: string


  results:
    # This section defines how an expected response can be expressed,
    # as well as the available tests methods (assert).
    type: array
    title: "The expected result"
    items:
      type: object
      required:
        - assert
      oneOf:
        - required:
            - ignore_schemas
            - status_code
        - required:
            - property
      properties:
        assert:
          type: string
          enum:
            - contains
            - not_contains
            - status_code
            - is_false
            - length_eq
            - length_gt
        data:
          type: object
          properties:
            <<: *datafields
            exists:
              type: boolean
            datasetId:
              type: string
          additionalProperties: false

  beacondata:
    # This section describes the data that should be in the beacon's data base
    type: object
    properties:
      datasets:
        # The datasets is a list of object. The extra layer (inner objects) is
        # there to allow referencing specific datasets in the response.
        type: array
        items:
          type: object
          title: The metadata assumed to be in the beacons
          properties:
            dataset:
              type: object
              properties:
                datasetId:
                  type: string
                assemblyId:
                  type: string
                variantCount:
                  type: integer
                callCount:
                  type: integer
                sampleCount:
                  type: integer
      variants:
        # The variants is a list of object. The extra layer (inner objects) is
        # there to allow referencing specific variants in the response.
        type: array
        items:
          type: object
          title: The data assumed to be in the beacons
          properties:
            variant:
              type: object
              <<: *datafields
              variantCount:
                type: integer
              callCount:
                type: integer
              sampleCount:
                type: integer
